name: Weekly Health Check

on:
  schedule:
    # Run every Monday at 09:00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual trigger

jobs:
  health-check:
    name: Project Health Assessment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run comprehensive health check
      run: |
        echo "üè• Claude Code Template Health Check"
        echo "======================================"
        echo ""
        
        # Test suite health
        echo "üìä Test Suite Status:"
        TEST_OUTPUT=$(npm test 2>&1)
        if echo "$TEST_OUTPUT" | grep -q "Tests.*passed"; then
          TESTS_PASSED=$(echo "$TEST_OUTPUT" | grep -o '[0-9]* passed' | head -1)
          echo "  ‚úÖ $TESTS_PASSED"
        else
          echo "  ‚ùå Tests failing"
        fi
        echo ""
        
        # Coverage check
        echo "üìà Coverage Status:"
        npm run test:coverage > /dev/null 2>&1
        if [ -f "coverage/lcov-report/index.html" ]; then
          echo "  ‚úÖ Coverage report generated"
        else
          echo "  ‚ö†Ô∏è Coverage report not available"
        fi
        echo ""
        
        # Framework detection capabilities
        echo "üîç Framework Detection Health:"
        DETECTORS=(
          "lib/detectors/JavaScriptDetector.js"
          "lib/detectors/PythonDetector.js"
          "lib/detectors/RustDetector.js"
          "lib/detectors/SwiftDetector.js"
        )
        
        for detector in "${DETECTORS[@]}"; do
          if [ -f "$detector" ]; then
            LANG=$(basename "$detector" | sed 's/Detector.js//')
            echo "  ‚úÖ $LANG detection available"
          fi
        done
        echo ""
        
        # Quality hooks status
        echo "‚öôÔ∏è Quality Hooks Status:"
        if [ -f ".claude/hooks/smart-lint.sh" ] && [ -x ".claude/hooks/smart-lint.sh" ]; then
          echo "  ‚úÖ Smart lint hook executable"
        else
          echo "  ‚ö†Ô∏è Smart lint hook not executable"
        fi
        
        if [ -f "lib/hook-utils.sh" ]; then
          echo "  ‚úÖ Hook utilities available"
        else
          echo "  ‚ö†Ô∏è Hook utilities missing"
        fi
        echo ""
        
        # Configuration integrity
        echo "üìã Configuration Status:"
        if [ -f "CLAUDE.md" ]; then
          CLAUDE_SIZE=$(wc -c < CLAUDE.md)
          if [ "$CLAUDE_SIZE" -gt 1000 ]; then
            echo "  ‚úÖ CLAUDE.md comprehensive ($CLAUDE_SIZE bytes)"
          else
            echo "  ‚ö†Ô∏è CLAUDE.md seems incomplete"
          fi
        else
          echo "  ‚ùå CLAUDE.md missing"
        fi
        
        if [ -d ".claude/commands" ]; then
          CMD_COUNT=$(find .claude/commands -name "*.md" | wc -l)
          echo "  ‚úÖ Command files available ($CMD_COUNT commands)"
        else
          echo "  ‚ö†Ô∏è Command files missing"
        fi
        echo ""
        
        # Dependency health
        echo "üì¶ Dependency Status:"
        if npm audit --audit-level=high > /dev/null 2>&1; then
          echo "  ‚úÖ No high-severity vulnerabilities"
        else
          echo "  ‚ö†Ô∏è Security vulnerabilities detected"
        fi
        
        # Check for outdated dependencies (non-blocking)
        OUTDATED=$(npm outdated --json 2>/dev/null || echo '{}')
        if [ "$OUTDATED" = '{}' ]; then
          echo "  ‚úÖ Dependencies up to date"
        else
          echo "  ‚ÑπÔ∏è Some dependencies have updates available"
        fi
        echo ""
        
        echo "‚úÖ Health check complete"
    
    - name: Check documentation freshness
      run: |
        echo "üìö Documentation Freshness Check:"
        
        # Check if ROADMAP exists and is recent
        if [ -f "ROADMAP-SWIFT-INTEGRATION-2025-07-10.md" ]; then
          echo "  ‚úÖ Swift integration roadmap available"
        fi
        
        # Check README last modified
        if [ -f "README.md" ]; then
          README_AGE=$(find README.md -mtime +30 2>/dev/null || echo "")
          if [ -z "$README_AGE" ]; then
            echo "  ‚úÖ README.md recently updated"
          else
            echo "  ‚ÑπÔ∏è README.md last updated >30 days ago"
          fi
        fi
        
        echo "  üìä Project files: $(find . -name "*.js" -o -name "*.md" | wc -l) total"
        echo "  üß™ Test files: $(find tests -name "*.test.js" | wc -l) test suites"
    
    - name: Performance benchmark
      run: |
        echo "‚ö° Performance Metrics:"
        
        # Test execution time
        START_TIME=$(date +%s%3N)
        npm test > /dev/null 2>&1
        END_TIME=$(date +%s%3N)
        TEST_DURATION=$((END_TIME - START_TIME))
        
        echo "  üìä Test suite execution: ${TEST_DURATION}ms"
        
        if [ "$TEST_DURATION" -lt 1000 ]; then
          echo "  ‚úÖ Excellent performance (<1s)"
        elif [ "$TEST_DURATION" -lt 5000 ]; then
          echo "  ‚úÖ Good performance (<5s)"
        else
          echo "  ‚ö†Ô∏è Consider optimizing test performance (${TEST_DURATION}ms)"
        fi