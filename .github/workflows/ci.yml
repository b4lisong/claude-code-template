name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run test coverage
      run: npm run test:coverage
      if: matrix.node-version == '20.x'
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
    
    - name: Run quality checks
      run: |
        if [ -f ".claude/hooks/smart-lint.sh" ]; then
          chmod +x .claude/hooks/smart-lint.sh
          .claude/hooks/smart-lint.sh
        else
          echo "Quality hooks not found, skipping"
        fi
    
    - name: Verify project structure
      run: |
        echo "Checking project structure..."
        [ -f "CLAUDE.md" ] || (echo "CLAUDE.md missing" && exit 1)
        [ -d "lib" ] || (echo "lib/ directory missing" && exit 1)
        [ -d "tests" ] || (echo "tests/ directory missing" && exit 1)
        echo "Project structure verified"

  lint:
    name: Code Style & Standards
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for forbidden patterns
      run: |
        echo "Checking for forbidden patterns from CLAUDE.md..."
        
        # Check for console.log in production code (exclude tests)
        if grep -r "console\.log" lib/ --include="*.js" 2>/dev/null; then
          echo "‚ùå Found console.log in production code (lib/)"
          exit 1
        fi
        
        # Check for emojis in code files
        if grep -rE '[üòÄ-üøø]|[üÄÄ-üØø]' lib/ tests/ --include="*.js" 2>/dev/null; then
          echo "‚ùå Found emojis in code files"
          exit 1
        fi
        
        # Check for Claude attribution patterns
        if grep -rE "(generated with.*claude|co-authored-by.*claude)" . --include="*.js" --include="*.md" --exclude="README.md" 2>/dev/null; then
          echo "‚ùå Found Claude attribution in files"
          exit 1
        fi
        
        echo "‚úÖ No forbidden patterns found"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true  # Don't fail CI on audit issues (not too strict)
    
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential secrets..."
        
        # Basic patterns for common secrets (API keys, tokens)
        if grep -rE "(api[_-]?key|secret[_-]?key|access[_-]?token|private[_-]?key)" lib/ tests/ --include="*.js" | grep -vE "(test|mock|example|placeholder)" 2>/dev/null; then
          echo "‚ö†Ô∏è Found potential secrets in code"
          echo "Please review and ensure no real secrets are committed"
        else
          echo "‚úÖ No obvious secrets found"
        fi